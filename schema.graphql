# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CalendarEvent {
    id: ID!
    info(lang: String!): EventInformation
    infos: [EventInformation]!
    location: Location!
    meta: EventMeta
    occurrences: [EventOccurrence]
    owner: User!
    status: EventStatus!
    time: EventTime!
}

type Error {
    message: String!
    path: String!
}

type EventInformation {
    description: String
    language: String!
    title: String!
}

type EventMeta {
    tags: [String]!
}

type EventOccurrence {
    end: String!
    event: CalendarEvent!
    id: ID!
    start: String!
}

type EventTime {
    end: Timestamp
    exceptions: String
    recurrence: String
    start: Timestamp
    timeZone: TimeZone
}

type Location {
    address: String
    name: String
}

type Mutation {
    createEvent(input: CreateEventInput!): CalendarEvent
    deleteEvent(id: ID!): User!
    grantRole(input: GrantRoleInput!): User!
    requestInvite(input: RequestInviteInput!): Boolean!
    revokeRole(input: GrantRoleInput!): User!
    signin(input: SigninInput!): UserSession!
    signup(input: SignupInput!): [Error]
    updateEvent(input: UpdateEventInput!): CalendarEvent
}

type Query {
    event(id: ID!): CalendarEvent
    events(filter: EventsQueryFilter!): [CalendarEvent]
    me: User
    occurrence(id: ID!): EventOccurrence
    occurrences(filter: OccurrencesQueryFilter!): [EventOccurrence]
}

type User {
    email: String!
    events: [CalendarEvent]!
    id: ID!
    name: String!
    roles: [UserRole!]
    username: String
}

type UserRole {
    type: RoleType!
    user: User!
}

type UserSession {
    ctime: Date!
    hash: String!
    isValid: Boolean!
    user: User!
}

input CreateEventInput {
    infos: [EventInformationInput]!
    location: EventLocationInput!
    meta: EventMetaInput!
    status: String!
    time: EventTimeInput!
}

input EventInformationInput {
    description: String
    language: String!
    title: String!
}

input EventLocationInput {
    address: String
    name: String
}

input EventMetaInput {
    tags: [String]!
}

input EventTimeInput {
    end: Timestamp!
    exceptions: String
    recurrence: String
    start: Timestamp!
    timeZone: TimeZone!
}

input EventsQueryFilter {
    categories: [Category]
    from: Timestamp
    limit: Int
    owner: ID
    to: Timestamp
}

input GrantRoleInput {
    roleType: RoleType!
    userId: ID!
}

input OccurrencesQueryFilter {
    categories: [Category]
    from: Timestamp
    limit: Int
    timeZone: TimeZone
    to: Timestamp
}

input RequestInviteInput {
    email: String!
}

input RevokeRoleInput {
    roleType: RoleType!
    userId: ID!
}

input SigninInput {
    hash: String!
}

input SignupInput {
    email: String!
    name: String!
    username: String!
}

input UpdateEventInput {
    id: ID!
    infos: [EventInformationInput!]
    location: EventLocationInput
    meta: EventMetaInput
    status: String
    time: EventTimeInput
}


scalar TimeZone

scalar Timestamp

scalar EventStatus

scalar RoleType

scalar Category

scalar Date

scalar Language
